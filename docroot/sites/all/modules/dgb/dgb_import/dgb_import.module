<?php

/**
 * @file
 * Drupal Guestbook Import allows to import guestbooks of the Guestbook module.
 *
 *   The import is realized with a batch process.
 */

/**
 * Implementation of hook_menu().
 */
function dgb_import_menu() {
  $items = array();

  $items['admin/settings/dgb/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments'   => array('dgb_import_form'),
    'access arguments' => array('administer guestbook'),
    'file' => 'dgb_import.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 15
  );
  $items['admin/settings/dgb/user-update'] = array(
    'title' => 'User update',
    'page callback' => 'drupal_get_form',
    'page arguments'   => array('dgb_user_update_form'),
    'access arguments' => array('administer guestbook'),
    'file' => 'dgb_import.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 15
  );

  $items['dgb_batch_import'] = array(
    'title' => 'DGB batch import',
    'page callback' => 'dgb_import_execute_guestbook_batch',
    'access arguments' => array('administer guestbook'),
    'type' => MENU_SUGGESTED_ITEM
  );

  $items['dgb_batch_user_update'] = array(
    'title' => 'DGB batch import',
    'page callback' => 'dgb_import_execute_guestbook_batch',
    'access arguments' => array('administer guestbook'),
    'type' => MENU_SUGGESTED_ITEM
  );

  return $items;
}

/**
 * Get informations of the two database tables.
 *
 * @return array
 *   Associative array contains this data:
 *   - source table informations
 *   - target table informations
 *   - possible_info; An negative information
 *   - possible value as boolean
 *     If this value FALSE the import is not possible.
 * @see dgb_import_admin()
 */
function dgb_import_info() {
  $src_table_name = 'guestbook';
  $target_table_name = 'dgb';
  
  $info = array(
    'src' => array(
      'status' => false,
      'count' => 0,
      'info' => array(
        'table' => array()
      ),
    ),
    'target' => array(
      'status' => true,
      'count' => db_result(db_query("SELECT count(id) FROM {". $target_table_name ."}")),
      'info' => array(
        'table' => drupal_get_schema($target_table_name)
      ),
    ),
    'possible' => false,
    'possible_info' => ''
  );

  /*
   * Get informations from source and target table.
   *
   * The Guestbook module is not a dependency.
   * drupal_get_schema() don't work if a module disabled.
   */
  if (db_table_exists($src_table_name) == true) {
    if (!module_exists($src_table_name)) {
      module_enable(array($src_table_name));
      $info['src']['status'] = true;
      $info['src']['info']['table'] = drupal_get_schema($src_table_name, true);
      $info['src']['count'] = db_result(db_query("SELECT count(id) FROM {". $src_table_name ."}"));
      module_disable(array($src_table_name));
    }
    else {
      $info['src']['status'] = true;
      $info['src']['info']['table'] = drupal_get_schema($src_table_name);
      $info['src']['count'] = db_result(db_query("SELECT count(id) FROM {". $src_table_name ."}"));
    }

    /**
     * Compare source and target table.
     *
     * The import is possible if the source and target table identical.
     *
     * Currently use the DGB table five additional fields and
     * the same field names.
     */

    // To compare hide the additional fields in the target table.
    $target_table_compare = $info['target']['info']['table']['fields'];
    unset($target_table_compare['hostname']);
    unset($target_table_compare['status']);
    unset($target_table_compare['changed']);
    unset($target_table_compare['comment_created']);
    unset($target_table_compare['comment_changed']);

    $compare_result_1 = array_diff_assoc($info['src']['info']['table']['fields'], $target_table_compare);
    $compare_result_2 = array_diff_assoc($target_table_compare, $info['src']['info']['table']['fields']);

    // Check it is possible to execute the import.
    if ($info['src']['status'] == true && count($compare_result_1) == 0 && count($compare_result_2) == 0 && $info['src']['count'] > 0) {
      $info['possible'] = true;
    }
    else {
      if ($info['src']['count'] == 0) {
        $info['possible_info'] = t('There are no Guestbook entries.');
      }
      if (count($compare_result_1) > 0 || count($compare_result_2) > 0) {
        $info['possible_info'] = t('Mismatches between the two guestbooks.');
      }
    }

  }
  else {
    $info['possible_info'] = t('No guestbook exists in the database to import data.');
  }

  return $info;
}

/**
 * Get informations of the users to update.
 *
 * @return array
 *   Associative array contains this data:
 *   - users_total; Count value of all user accounts
 *   - users_to_update; Count value of accounts to update
 *   - necessary_info; An negative information
 *   - necessary value as boolean
 *     If this value FALSE the update is not necessary.
 */
function dgb_import_update_info() {
  $info = array(
    'users_to_update' => 0,
    'necessary' => false,
    'necessary_info' => t('No account contains data for an update.')
  );

  // Count all accounts.
  $info['users_total'] = db_result(db_query("SELECT count(uid) FROM {users} WHERE uid <> 0"));

  $result = db_query("SELECT uid, data FROM {users} WHERE uid <> 0");

  // Count the accounts needs update.
  $i = 0;
  while ($row = db_fetch_array($result)) {
    $data = unserialize($row['data']);

    if (isset($data['guestbook_status']) || isset($data['guestbook_visited']) || isset($data['guestbook_intro']) || isset($data['guestbook_send_email'])) {
      ++$i;
    }
  }

  if ($i > 0) {
    $info['users_to_update'] = $i;
    $info['necessary'] = true;
  }

  return $info;
}

/**
 * Menu callback to initiate the guestbook import as batch process.
 */
function dgb_import_execute_guestbook_batch() {
  return dgb_import_execute_guestbook_import();
}

/**
 * Menu callback to initiate the user update as batch process.
 */
function dgb_import_execute_user_update_batch() {
  return dgb_import_execute_user_update();
}

/**
 * The import as batch process.
 */
function dgb_import_execute_guestbook_import() {
  $operations = array();

  $operations[] = array('dgb_import_batch_import_op', array());

  $batch = array(
    'operations' => $operations,
    'finished' => 'dgb_import_batch_import_finished',
    // We can define custom messages instead of the default ones.
    'title' => t('Processing guestbook import.'),
    'init_message' => t('Batch import is starting.'),
    'error_message' => t('Batch import has encountered an error.'),
  );

  return $batch;
}

/**
 * Execute the import batch operation.
 */
function dgb_import_batch_import_op(&$context) {
  $data = variable_get('dgb_import_import_info', array());

  // Prepare the batch process.
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_entry'] = 0;
    $context['sandbox']['max'] = db_result(db_query("SELECT COUNT(DISTINCT id) FROM {". $data['src']['info']['table']['name'] ."}"));
  }
  $limit = 5;

  /**
   *  Prepare the insert query placeholders.
   */
  $src_fields = $data['src']['info']['table']['fields'];
  // Add the additional fields to source table data.
  $src_fields['hostname'] = $data['target']['info']['table']['fields']['hostname'];
  $src_fields['status'] = $data['target']['info']['table']['fields']['status'];
  $src_fields['changed'] = $data['target']['info']['table']['fields']['changed'];
  $src_fields['comment_created'] = $data['target']['info']['table']['fields']['comment_created'];
  $src_fields['comment_changed'] = $data['target']['info']['table']['fields']['comment_changed'];

  // Get the placeholders.
  $fieldholders = _dgb_import_fieldholders($src_fields);
  $placeholders = _dgb_import_placeholders($src_fields);

  // Empty the target table.
  if ($data['target']['count'] > 0) {
    db_query("TRUNCATE TABLE {". $data['target']['info']['table']['name'] ."}");
  }

  // Deactivate the target table auto increment.
  db_query("ALTER TABLE {". $data['target']['info']['table']['name'] ."} CHANGE id id INT(10) UNSIGNED NOT NULL");

  // Provide the insert query itself.
  $query = "INSERT INTO {". $data['target']['info']['table']['name'] ."} ($fieldholders) VALUES($placeholders)";

  // Run the batch process.
  $result = db_query_range("SELECT * FROM {". $data['src']['info']['table']['name'] ."}
                            ORDER BY created ASC", $context['sandbox']['current_entry'], $context['results']['entries'], $limit);

  while ($entry = db_fetch_array($result)) {
    // Store some result for post-processing in the finished callback.
    ++$context['results']['entries'];

    // Update our progress information.
    ++$context['sandbox']['progress'];
    $context['sandbox']['current_entry'] = $entry['id'];
    $context['message'] = t('Proccessed !current of !total entries.', array('!current' => $context['results']['entries'], '!total' => $context['sandbox']['max']));

    // Insert the data to the target table.
    // Note: drupal_write_record() can not handle auto increment tables (also if auto increment deactivated)
    db_query($query, $entry);

  }

  // Reactivate the target table auto increment.
  db_query("ALTER TABLE {". $data['target']['info']['table']['name'] ."} CHANGE id id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT");

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * The user update as batch process.
 */
function dgb_import_execute_user_update() {
  $operations = array();

  $operations[] = array('dgb_import_batch_user_update_op', array());

  $batch = array(
    'operations' => $operations,
    'finished' => 'dgb_import_batch_user_update_finished',
    // We can define custom messages instead of the default ones.
    'title' => t('Processing user update.'),
    'init_message' => t('Batch user update is starting.'),
    'error_message' => t('Batch user update has encountered an error.'),
  );

  return $batch;
}

/**
 * Execute the user update batch operation.
 */
function dgb_import_batch_user_update_op(&$context) {
  $default_dgb_status = variable_get('dgb_enabled_status', 1);

  // Prepare the batch process.
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_user'] = 1;
    $context['sandbox']['max'] = db_result(db_query("SELECT COUNT(DISTINCT uid) FROM {users} WHERE uid <> 0"));
  }
  $limit = 5;

  // Run the batch process.
  $result = db_query_range("SELECT * FROM {users}
                            WHERE uid <> 0
                            ORDER BY created ASC", $context['sandbox']['current_user'], $context['results']['users'], $limit);

  while ($row = db_fetch_array($result)) {
    // Store some result for post-processing in the finished callback.
    ++$context['results']['users'];

    $user = user_load(array('uid' => $row['uid']));
    $edit = unserialize($user->data);

    if (isset($edit['guestbook_status']) || isset($edit['guestbook_visited']) || isset($edit['guestbook_intro']) || isset($edit['guestbook_send_email'])) {
      // Guestbook enabled.
      if (isset($edit['guestbook_status']) && !isset($edit['dgb_status'])) {
        $edit['dgb_status'] = $edit['guestbook_status'];
        $edit['guestbook_status'] = NULL;
      }
      if (isset($edit['guestbook_status']) && isset($edit['dgb_status'])) {
        $edit['guestbook_status'] = NULL;
      }
      if (!isset($edit['guestbook_status']) && !isset($edit['dgb_status'])) {
        $edit['dgb_status'] = $default_dgb_status;
      }
      // Guestbook visited.
      if (isset($edit['guestbook_visited'])) {
        $edit['dgb_visited'] = $edit['guestbook_visited'];
        $edit['guestbook_visited']  = NULL;
      }
      // Guestbook intro.
      if (isset($edit['guestbook_intro'])) {
        $edit['dgb_intro'] = $edit['guestbook_intro'];
        $edit['guestbook_intro'] = NULL;
      }
      // Guestbook send email. Currently this parameter are not used in DGB.
      if (isset($edit['guestbook_send_email'])) {
        $edit['dgb_send_email'] = $edit['guestbook_send_email'];
        $edit['guestbook_send_email'] = NULL;
      }

      // Store some result for post-processing in the finished callback.
      ++$context['results']['updated'];

      // Update user data.
      $account = user_save($user, $edit);
    }

    // Update our progress information.
    ++$context['sandbox']['progress'];
    $context['sandbox']['current_user'] = $row['uid'];
    $context['message'] = t('Proccessed !current of !total users.', array('!current' => $context['results']['users'], '!total' => $context['sandbox']['max']));
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 *  Provides status messages for the import batch process.
 */
function dgb_import_batch_import_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    $message = 'The guestbook import was executed successfully.';
    drupal_set_message($message);
    // We just display the number of entries we processed.
    $message1 = 'Guestbook entries are imported to DGB' .': '. $results['entries'];
    drupal_set_message($message1);
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = 'An error occurred while processing ' . $error_operation[0] . ' with arguments :' . print_r($error_operation[0], TRUE);
    drupal_set_message($message);
  }
}

/**
 *  Provides status messages for the user update batch process.
 */
function dgb_import_batch_user_update_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    $message = 'The user update was executed successfully.';
    drupal_set_message($message);
    // We just display the number of accounts we processed.
    $message1 = 'Checked accounts' .': '. $results['users'];
    // We just display the number of updated accounts we processed.
    $message2 = 'Updated accounts' .': '. $results['updated'];
    drupal_set_message($message1);
    drupal_set_message($message2);
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = 'An error occurred while processing ' . $error_operation[0] . ' with arguments :' . print_r($error_operation[0], TRUE);
    drupal_set_message($message);
  }
}

/**
 * Help function to build import informations.
 *
 * @param array $data
 *   The data from dgb_import_info().
 * @return string
 *   The data needed to build the table or a information
 *   if the import not possible.
 * @see file dgb_import.admin.inc|dgb_import_form()
 */
function _dgb_import_info_table($data) {
  $output = '';
  $rows = array();

  $header = array('', t('Guestbook'), t('Drupal Guestbook'));

  if ($data['possible'] == true) {
    $rows[] = array('Entries', $data['src']['count'], $data['target']['count']);
    $output = theme('table', $header, $rows);
    if ($data['target']['count'] > 0) {
      $output .= '<div class="description">'. t('The import will remove existing entries in the target database table.') .'</div>';
    }
  }
  else {
    $output = '<p>'. t('The import is not possible.') .'</p>';
    $output .= '<p>'. $data['possible_info'] .'</p>';
  }

  return $output;
}

/**
 * Help function to build user update informations.
 *
 * @param array $data
 *   The data from dgb_import_update_info().
 * @return string
 *   The data needed to build the table or a information
 *   if the update not necessary.
 * @see file dgb_import.admin.inc|dgb_user_update_form()
 */
function _dgb_import_user_update_info_table($data) {
  $output = '';
  $rows = array();

  $header = array('', t('Users total'), t('Users to update'));

  if ($data['users_to_update'] > 0) {
    $rows[] = array('Users', $data['users_total'], $data['users_to_update']);
    $output = theme('table', $header, $rows);
    if ($data['users_to_update'] > 0) {
      $output .= '<div class="description">'. t('The update will change the account setting parameters <em>guestbook_status</em>, <em>guestbook_visited</em> and <em>guestbook_intro</em> to <em>dgb_status</em>, <em>dgb_visited</em> and <em>dgb_intro</em>.') .'</div>';
    }
  }
  else {
    $output = '<p>'. t('The user update is not necessary.') .'</p>';
    $output .= '<p>'. $data['necessary_info'] .'</p>';
  }

  return $output;
}

/**
 * Help function to build a placeholder string.
 *
 * @param array $pieces
 * @return string
 * @see dgb_import_batch_import_op()
 */
function _dgb_import_placeholders($pieces = array()) {
  $holder_i = count($pieces);
  
  $i = 0;
  foreach ($pieces as $key => $value) {
    ++$i;
    $holder = db_placeholders(array($key), $value['type']);
    if ($i < $holder_i) {
      $holder .= ', ';
    }
    $holders .= $holder;
  }

  return $holders;
}

/**
 * Help function to build a fieldholder string.
 *
 * @param array $pieces
 * @return string
 * @see dgb_import_batch_import_op()
 */
function _dgb_import_fieldholders($pieces = array()) {
  $keys = array_keys($pieces);
  return implode(',', $keys);
}

/**
 * Import function test for the simulation of any size Guestbook's.
 *
 *   Developer code to create entries in the Guestbook DB table
 *   to use for an import to the Drupal Guestbook (DGB) DB table.
 *
 *   Quick usage:
 *   - Use the Devel module tool "PHP code to execute" and create Guestbook entries.
 *   - Run the DGB import tool.
 *

$entries_to_create = 1000;
$query = "INSERT INTO {guestbook} (recipient,author,anonname,anonemail,anonwebsite,message,commentauthor,comment,created) VALUES(%d, %d, '%s', '%s', '%s', '%s', %d, '%s', %d)";
$entry['recipient'] = 0;
$entry['author'] = 1;
$entry['anonname'] = '';
$entry['anonemail'] = '';
$entry['anonwebsite'] = '';
$entry['message'] = 'Es lubime mislijm dva, skolk neskolk malostis sam li. Maluo neskolk no dla, bo den lico okno. Znat dobrju priatelica oni es. Pridij zxenis pomocit zxe bi. Gda brat glosuf dolaris es, ku dva svadit silaju lubijm. So kai tenis utratite, na oni email vsezem, divaj utratite glubinju dom es. Letoju ovocxju bu sol.';
$entry['commentauthor'] = 0;
$entry['comment'] = '';
$entry['created'] = time();
for ($i = 0; $i < $entries_to_create; $i++) {
 db_query($query, $entry);
}

 *
 */
