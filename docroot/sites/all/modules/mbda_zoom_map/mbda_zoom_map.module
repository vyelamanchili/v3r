<?php
// $Id: mbda_zoom_map.module,v 1.0 2010/06/07 00:00:00 vyelamanchili Exp $

/**
 * @file
 * Module for customizing the zoom maps 
 */

/**
 * Implemenetation of hook_init();
 */
/*--------------------------------------------------------------------------------------------------------*/
function mbda_zoom_map_init() {
	drupal_add_css(drupal_get_path('module', 'mbda_zoom_map') .'/css/zoommap.css');
	drupal_add_js(drupal_get_path('module', 'mbda_zoom_map') .'/js/zoommap.js');
}
/*--------------------------------------------------------------------------------------------------------*/


/**
 * Displays help and information about this module 
 * 
 * @param path the path where the help will be displayed
 * @param arg array that holds the current path as would be returned from arg() function
 * 
 * @return help text for the path
 *
 * Implementation of hook_help()
 */ 
 function mbda_zoom_map_help($path, $arg) {
	$output = '';
  switch($path) {
	  case 'admin/help#mbda_zoom_map':
			$output = '<p>' . t("The MBDA Zoom Maps module was developed to use as a regional office locator on the US Map. This module's control panel lets you add/ select the image you want to use as the US map and also the images you want to use as the clickable region on this map to zoom in for further detailed information. You can also add text into clickable dots on the map which pops-up text boxes with the message in it. This module can be used also to implement something else based on your creativity. :)") . '</p>';
			break;
	 }
	return $output;
}
/*--------------------------------------------------------------------------------------------------------*/
/**
 * Valid permissions for this module
 * 
 * @return array An array of valid permissions for the mbda_zoom_module
 *
 * Implementation of hook_perm()
 */ 
function mbda_zoom_map_perm() {
	return array("view map", "edit module settings", );
}
 /*--------------------------------------------------------------------------------------------------------*/
/**
 * Implemenetation of hook_menu();
 */
function mbda_zoom_map_menu() {
	$items = array();

	//Main menu item to reasch the settings page
	$items['admin/content/mbdazoommap'] = array(
		'title' => t('Manage MBDA Zoom Maps'),
		'description' => t('Use this page to add content and map images.'),
  	'page callback' =>  'mbda_zoom_map_list_instances',
  	'access arguments' => array('edit module settings'),
  	'type' => MENU_NORMAL_ITEM,
  );	
	
	//The Default tab for the settings of zoom maps.
	//Displays a list of zoom map instances to edit
	$items['admin/content/mbdazoommap/list'] = array(
		'title' => t('List'),
		'description' => t('Use this page to add content and map images.'),
  	'page callback' => 'mbda_zoom_map_list_instances',
  	'access arguments' => array('edit module settings'),
  	'type' => MENU_DEFAULT_LOCAL_TASK	,
		'weight' => 0,
  );

	//Subregion Edit or Add
	$items['admin/content/mbdazoommap/subregions/%'] = array(
		'title' => t('Submaps'),
		'description' => t('Use this page to add/edit sub maps to the selected map.'),
  	'page callback' => 'drupal_get_form',
  	'page arguments' => array('mbda_zoom_map_add_edit_subregions',4),
  	'access arguments' => array('edit module settings'),
  	'type' => MENU_LOCAL_TASK,
		'weight' => 1,
		
  );
	
	//Points Edit or Add
	$items['admin/content/mbdazoommap/points/%'] = array(
		'title' => t('Points Data'),
		'description' => t('Use this page to add points on the map with data.'),
  	'page callback' => 'drupal_get_form',
  	'page arguments' => array('mbda_zoom_map_add_edit_points', 4),
  	'access arguments' => array('edit module settings'),
  	'type' => MENU_LOCAL_TASK,
		'weight' => 2,
  );
	
	//General Settings for the map
	$items['admin/content/mbdazoommap/settings'] = array(
		'title' => t('General settings'),
		'description' => t('This page contains the basic settings for the zoom map.'),
  	'page callback' => 'drupal_get_form',
  	'page arguments' => array('mbda_zoom_map_settings'),
  	'access arguments' => array('edit module settings'),
  	'type' => MENU_LOCAL_TASK	,
		'weight' => 3,
  );
	
		//Deleting the selected map
	$items['admin/content/mbdazoommap/deletemap/%'] = array(
		'title' => t('Delete Selected Map and its content'),
		'description' => t('Are you sure you want to delete the following map, its child maps and all its related data points?'),
  	'page callback' => 'drupal_get_form',
  	'page arguments' => array('mbda_zoom_map_delete_map_and_contents', 4),
  	'access arguments' => array('edit module settings'),
  	'type' => MENU_CALLBACK	,
  );
		
	
	//Page link to display the zoom map instance.
	$items['main/%'] = array(
		'title' => t('MBDA'),
		'title callback' => '_mbda_zoom_map_get_page_title',
		'title arguments' => array(1),
		'page callback' => '_mbda_zoom_map_getcontent',
		'page arguments' => array('nodecontent', 1), 
		'access arguments' => array('view map'),
		'type' => MENU_CALLBACK,
	);

  return $items;	
}

/*--------------------------------------------------------------------------------------------------------*/
/**
 * This function is called when the menu / list is clicked
 *
 * $return html page with list of instances of zoom map.
 *
 */
function mbda_zoom_map_list_instances() {

	$subContent	= '';
	//Displaying the list of main maps
	$select_query = db_query("SELECT mapid, imgid FROM {mbda_zoom_map_image_map} WHERE parentimgid = ''");

	$pagecontent = '<div style="padding: 10px;">
									<h3>List of all instances of Zoom map</h3>
									<h4>Use this table to edit the main map and its data points</h4>
									<table style="width:100%">
										<thead>
										<tr>
											<th>Map Instance name</th>
											<th>Operation</th>
										</tr>
										</thead><tbody>';
	//For even odd rows
	$count = 1;
	$innerCount = 1;
	while($listItem = db_fetch_array($select_query)) {
		$pagecontent .= '<tr class="' . ((($count%2) == 0) ? 'even' : 'odd') . '">
											<td><a href="/main/'.$listItem['mapid'] .'" target="_blank">'.$listItem['mapid'] .'</a></td>
											<td>
													<a href="/admin/content/mbdazoommap/subregions/' . $listItem['imgid'] . '">Edit</a> 
													&nbsp; | &nbsp;
													<a href="/admin/content/mbdazoommap/deletemap/' . $listItem['imgid'] . '">Delete</a>													
											</td>
										</tr>';
											
		//Listing the list of submaps with their parent maps
		$childMap_Query = db_query("SELECT parentimgid, imgid FROM {mbda_zoom_map_image_map} 
																WHERE mapid = '%s' AND parentimgid != ''", 
																array($listItem['mapid']));	
		
		while($subListItem = db_fetch_array($childMap_Query)) {
				$subContent .= '<tr class="' . ((($innerCount%2) == 0) ? 'even' : 'odd') . '">
													<td>' . $subListItem['parentimgid'] . '</td>
													<td>' . $subListItem['imgid'] . '</td>
													<td>
														<a href="/admin/content/mbdazoommap/subregions/' . $subListItem['imgid'] . '">Edit</a> 
														&nbsp; | &nbsp;
														<a href="/admin/content/mbdazoommap/deletemap/' . $subListItem['imgid'] . '">Delete</a>
													</td>
												</tr>'; 
				$innerCount++;
		}
		$count++;
	}
	
	$pagecontent .= '</tbody></table><br><br>';

	//If the subContent was added concatenate with the page content
	if(!empty($subContent)) {
		 $pagecontent .= '<h3>List of all the submaps and their parents.</h3>
		 									<h4>Use this table to edit the submaps and its data points</h4>
		 									<table style="width:100%">
												<thead>
		 										<tr>
													<th>Parent map name</th>
													<th>Submap name</th>
													<th>Operation</th>
												</tr>
												</thead><tbody>'
											. $subContent 
											. '</tbody></table><br><br>';
	}
	
	$pagecontent.='<br><a href="/admin/content/mbdazoommap/subregions/newmap"> Add new instance</a></div>';
	

	return $pagecontent;
}
/*--------------------------------------------------------------------------------------------------------*/
/**
 * This function returns a form for the addition of content to the zoom map. 
 * When browsed trhough menu item in content management this form is displayed.
 *
 * $return form elements for adding content to the map.
 *
 */  
function mbda_zoom_map_add_edit_subregions(&$form_state, $delta = NULL ) {

	$form = array();
	$subRegions = array();
	
	//AHAH Helper initialization
	ahah_helper_register($form, $form_state);
	
	//Checking if the delta was sent or stored.
	if(!isset($form_state['storage']['mbda_zoom_map_content_setting']['mbda_zoom_map_mapid_delta'])) {
		$delta = $delta;
	} else {
		$delta = $form_state['storage']['mbda_zoom_map_content_setting']['mbda_zoom_map_mapid_delta'];	
	}
	
	//Handling the count of input fields sets
	if(!isset($form_state['storage']['mbda_zoom_map_content_count'])) {
		$countoffields = 0;
	} else {
		$countoffields = $form_state['storage']['mbda_zoom_map_content_count'];
		if(isset($form_state['values']['add_more']) && $form_state['values']['op'] == 'Add more subregions') {
			$countoffields++;
		}
	}		
	
	//This part of the code checks if the parameter sent has any data in the database and generates the appropriate form (add / edit) based on data results
	if(!empty($delta)) {
		
		
		//Checking if the mapid sent as delta existss in the database check for both main map and submaps as parents
		$check_query = db_fetch_array(db_query("SELECT COUNT(*) as counter FROM {mbda_zoom_map_image_map} 
																						WHERE imgid = '%s'", array($delta)));
		
		if($check_query['counter'] == 1 && 
				$form_state['storage']['mbda_zoom_map_initial_load_done_flag'] != 'DONE') {
			
			//if the mapid exists, count the number of rows with this image as parent
			$count_query = db_fetch_array(db_query("SELECT COUNT(*) as counter FROM {mbda_zoom_map_image_map} 
																							WHERE parentimgid = '%s'", array($delta)));
			
			//if above query retrieved > 0 then store the count else leave it to what it was
			if($count_query['counter'] > 0) {
				$countoffields = $count_query['counter'];
				
				//also retrieve all the children maps because there are some
				$getchildren_query = db_query("SELECT * FROM {mbda_zoom_map_image_map}
																				WHERE parentimgid = '%s'", array($delta));
				
				//Keeping track of the initial load. We donot want to load only the db ones everytime when editing.
				$form['mbda_zoom_map_initial_load_done_flag'] = array(
					'#type' => 'value',
					'#value' => 'DONE',
				);
				
				while($childItem = db_fetch_array($getchildren_query)) {
					$subRegions[] = $childItem;
				}																				
			}
		}
	}

	
	//Creating the points count hidden field to keep track of how many pointes were generated
	$form['mbda_zoom_map_content_count'] = array(
		'#type' => 'value',
		'#value' => $countoffields,
	);	
	


	//File upload
	$form['#attributes'] = array('enctype' => "multipart/form-data");
	$form['mbda_zoom_map_upload_map_image'] = array(
		'#type' => 'file',
		'#title' => t('Upload Images'),
		'#description' => t('Select a PNG image file to upload for use as a map or submap. Max file size: 100 Kb.'),
	);


	
	//FIELDSET
	$form['mbda_zoom_map_content_setting'] = array(
		'#type' => 'fieldset',
		'#title' => t('Content Configuration'),
		'#collapsible' => TRUE,
		'#description' => t('This fieldset lets you change/add submaps to the selected zoom map instance.'),	
		'#prefix' => '<div id="add_more_content_area">',
		'#suffix' => '</div>',
		'#tree' => TRUE,
	);	
	
	//Retriveing the main image info to preload when editing
	$main_image_query = db_fetch_array(db_query("SELECT * FROM {mbda_zoom_map_image_map} 
																								WHERE parentimgid = '' AND imgid = '%s'", $delta));


	//Loading the list of files or images
	foreach(file_scan_directory(variable_get('file_directory_path', '') . '/images/zoommap', '.png') as $key => $value) {
		$filelist[$key] = $key;
	}
	
	//Setting this instance unique identifier
	$form['mbda_zoom_map_content_setting']['mbda_zoom_map_mapid_delta'] = array(
		'#type' => 'textfield',
		'#title' => t('Enter a unique name for the selected map'),
		'#description' => t('Select a unique name to differentiate this zoom map instance from the other instances. like USmap, globalmap etc.. Donot include spaces.'),
		'#default_value' => $main_image_query['imgid'],
	//	'#disabled' => ($delta == 'newmap') ? FALSE : TRUE,
		'#required' => TRUE,
	);
	
	//Setting the main map image
	$form['mbda_zoom_map_content_setting']['mbda_zoom_map_selected_unzoomed_map_image'] = array(
		'#type' => 'select',
		'#title' => t('Main map image'),
		'#options' => $filelist,
		'#default_value' => $main_image_query['mapimage'],
		'#description' => t('Select the image file you want to display for the main unzoomed map.'),
		'#required' => TRUE,
	);
	
	//Setting the width and height for the main image if left empty default size will be used	
	$form['mbda_zoom_map_content_setting']['mbda_zoom_map_mainimage_width'] = array(
		'#type' => 'textfield',
			'#title' => t('Width of main image'),
			'#description' => t('Enter the width for the main image on the page. If left blank, default size will be used which is set using the general settings tab.'),
			'#default_value' => isset(
													$form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_mainimage_width'] ) ? 
													$form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_mainimage_width'] : 							
													$main_image_query['imgwidth'],
			'#maxlength' => 4,
			'#size' => 4,
	);

	$form['mbda_zoom_map_content_setting']['mbda_zoom_map_mainimage_height'] = array(
		'#type' => 'textfield',
		'#title' => t('Height of main image'),
		'#description' => t('Enter the height for the main image on the page. If left blank, default size will be used which is set using the general settings tab.'),
		'#default_value' => isset(
													$form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_mainimage_height'] ) ? 
													$form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_mainimage_height']: 
													$main_image_query['imgheight'],
		'#maxlength' => 4,
		'#size' => 4,		
	);





	//Loading the form elements to select the files for subregions
	for($i = 0; $i < $countoffields; $i++) {
		$form['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_id'] = array(
			'#type' => 'textfield',
			'#title' => t('Unique name for subregion '. ($i+1)),
			'#description' => t('Select a unique name for your identification of this subregion. Donot use spaces.'),
			'#default_value' => isset($form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_id']) ?
																$form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_id'] :
																$subRegions[$i]['imgid'] ,
			'#maxlength' => 30,
			'#size' => 30,
		//	'#disabled' => (isset($form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_id']) 
		//									|| !empty($subRegions[$i]['imgid'])) ? TRUE : FALSE, //Disable editing of it if value exists
			'#required' => TRUE,
		);
		
		$form['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i] = array(
			'#type' => 'select',
			'#title' => t('Subregion '. ($i+1)),
			'#options' => $filelist,
			'#default_value' => $subRegions[$i]['mapimage'],
			'#description' => t('Select the image you want to display for this subregion in the selected "Main map image".'),			
			'#required' => TRUE,
		);
		
		$form['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_x'] = array(
			'#type' => 'textfield',
			'#title' => t('X Coordinate of Subregion '. ($i+1)),
			'#description' => t('Enter the X pixel position on the "Main map" where you want to display this submap.'),
			'#default_value' => isset($form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_x']) ?
																$form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_x'] :
																$subRegions[$i]['xcoordinate'] ,

			'#maxlength' => 4,
			'#size' => 4,
			'#required' => TRUE,
		);
		
		$form['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_y'] = array(
			'#type' => 'textfield',
			'#title' => t('Y Coordinate of Subregion '. ($i+1)),
			'#description' => t('Enter the Y pixel position on the "Main map" where you want to display this submap.'),
			'#default_value' => isset($form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_y']) ?
																$form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_y'] :
																$subRegions[$i]['ycoordinate'] ,
			'#maxlength' => 4,
			'#size' => 4,
			'#required' => TRUE,
		);
		
		$form['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_width'] = array(
			'#type' => 'textfield',
			'#title' => t('Width of the unzoomed subregion '. ($i+1)),
			'#description' => t('Enter the width of this clickable subregion on which you will click to zoom in to the subregion.'),
			'#default_value' => isset(
													$form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_width'] ) ? 
													$form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_width'] : 
													$subRegions[$i]['imgwidth'] ,
			'#maxlength' => 4,
			'#size' => 4,
			'#required' => TRUE,
		);
		
		$form['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_height'] = array(
			'#type' => 'textfield',
			'#title' => t('Height of the unzoomed subregion '. ($i+1)),
			'#description' => t('Enter the height of this clickable subregion on which you will click to zoom in to the subregion.'),
			'#default_value' => isset(
										$form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_height'] ) ? 
										$form_state['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_height'] : 
										$subRegions[$i]['imgheight'] ,
			'#maxlength' => 4,
			'#size' => 4,
			'#required' => TRUE,
		);
	}
	
	
	
	
	$form['add_more'] = array(
		'#type' => 'submit',
		'#value' => 'Add more subregions',
		'#ahah' => array(
			'event' => 'click',
			'path' => ahah_helper_path(array('mbda_zoom_map_content_setting')),
			'wrapper' => 'add_more_content_area',
		),
  );	
		
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
	);	
	
	return $form;
}
/*--------------------------------------------------------------------------------------------------------*/
/**
 * Implement the hook_form_validate()
 * This function does the validation of the content form. Makes sure the values are entered proeprly.
 *
 * @param form an array that contains user data
 * @param form_state an array that contains user data
 */
function mbda_zoom_map_add_edit_subregions_validate($form_id, &$form) {
	$destination = variable_get('file_directory_path', '') . '/images/zoommap';
	
	//Making sure the default name is not chosen as the id for the map.
	if($form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_mapid_delta'] == 'newmap') {
		drupal_set_message("Enter a unique identifier for this map. You cannot use the default 'newname' as identifier.");
		return;
		}

	if($file = file_save_upload('mbda_zoom_map_upload_map_image', array(), $destination, false)) {
		drupal_set_message('Success! Your image file has been uploaded.', 'status');
		drupal_set_message("You uploaded $file->filename, it is $file->filesize bytes, and has a mimetype of $file->filemime.");
	} else if(!empty($form['values']['mbda_zoom_map_upload_map_image'])) {
		drupal_set_message('Sorry, your image file has not been uploaded. Please try again.', 'error');
		return;
	}  
}


/*--------------------------------------------------------------------------------------------------------*/
/**
 * implementation of hook_formname_submit()
 * This function handles the inserting of content entered in the form into the database.
 *
 * @param form an array that contains user data
 * @param form_state an array that contains user data
 */
function mbda_zoom_map_add_edit_subregions_submit($form_id, &$form) {

	$subRegions = array();
	
	if ($form['values']['op'] == 'Save') {
		
		$no_of_subregions = $form['values']['mbda_zoom_map_content_count'];
		$delta = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_mapid_delta'];
		$main_map_image = $form['values']['mbda_zoom_map_selected_unzoomed_map_image'];		
		
		//This part of the code checks if the parameter sent has any data in the database and generates the appropriate form (add / edit) based on data results
		if(!empty($delta)) {
			
			//Checking if the mapid sent existss in the database
			$check_query = db_fetch_array(db_query("SELECT COUNT(*) as counter FROM {mbda_zoom_map_image_map} 
																							WHERE imgid = '%s'", array($delta)));

			//If the delta exists in the DB then update the parent and submaps (insert if necessary
			if($check_query['counter'] == 1) {
				
				//Update the changes to the parent map.				
				$itemToInsert['mapid'] = $delta;
				$itemToInsert['imgid'] = $delta;
				$itemToInsert['parentimgid'] = NULL;
				$itemToInsert['mapimage'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_selected_unzoomed_map_image'];
				$itemToInsert['imgwidth'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_mainimage_width'];
				$itemToInsert['imgheight'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_mainimage_height'];
				$itemToInsert['xcoordinate'] = 0;
				$itemToInsert['ycoordinate'] = 0;								

//TODO: UPDATE THE CODE SUCH THAT IT KEEP TRACK OF OLD DELTA TO UPDATE TO NEW. Currently it is meaningless.
					
				//Confirm message that update was successful for this record
				if(drupal_write_record('mbda_zoom_map_image_map', $itemToInsert, 'imgid') == SAVED_UPDATED) {
					drupal_set_message("Updated main map values in database");
				} else {
					drupal_set_message("Could not update main map values in database");
				}
				
				//Counting values to update inside the for loop
				$count_query = db_fetch_array(db_query("SELECT COUNT(imgid) as counter FROM {mbda_zoom_map_image_map} 
																								WHERE parentimgid = '%s'", array($delta)));
																			
				//collect all items to insert. do update or insert based on conditions
				for($i = 0; $i < $no_of_subregions; $i++) {

					$itemToInsert['mapid'] = $delta;
					$itemToInsert['imgid'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_id'];
					$itemToInsert['parentimgid'] = $delta;
					$itemToInsert['mapimage'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i];
					$itemToInsert['imgwidth'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_width'];
					$itemToInsert['imgheight'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_height'];
					$itemToInsert['xcoordinate'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_x'];
					$itemToInsert['ycoordinate'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_y'];					
					//If all existing values are not udpated update else insert
					if($i < $count_query['counter']) {
						//UPDATE	
						//Confirm message that update was successful for this record
						if(drupal_write_record('mbda_zoom_map_image_map', $itemToInsert, 'imgid') == SAVED_UPDATED) {
							drupal_set_message("Updated values in database");
						} else {
							drupal_set_message("Could not update values in database");
						}
					} else {
						//INSERT					
						if(drupal_write_record('mbda_zoom_map_image_map', $itemToInsert) == SAVED_NEW) {
							drupal_set_message("Inserted value in database.");
						} else {
							drupal_set_message("Could not Insert values in database.", 'error');
						}
					}
				}
			} 			
			//If the update was not done then you have to insert new values into DB
			else {			
				//First storing the parent image information into the Database
				$itemToInsert['mapid'] = $delta;
				$itemToInsert['imgid'] = $delta;
				$itemToInsert['parentimgid'] = NULL;
				$itemToInsert['mapimage'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_selected_unzoomed_map_image'];
				$itemToInsert['imgwidth'] = (!empty($form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_mainimage_width'])) ? $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_mainimage_width'] : variable_get('mbda_zoom_map_big_width', 960);
				$itemToInsert['imgheight'] = (!empty($form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_mainimage_height'])) ? $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_mainimage_height'] : variable_get('mbda_zoom_map_big_height', 511);
				$itemToInsert['xcoordinate'] = 0;
				$itemToInsert['ycoordinate'] = 0;					
						
				if(drupal_write_record('mbda_zoom_map_image_map', $itemToInsert) == SAVED_NEW) {
					drupal_set_message("Inserted value in database.");
				} else {
					drupal_set_message("Could not Insert values in database.", 'error');
				}
				
				//$retrievedparentid = db_last_insert_id('{mbda_zoom_map_image_map}', 'imgid');
			
				for($i = 0; $i < $no_of_subregions; $i++) {
					$itemToInsert['mapid'] = $delta;
					$itemToInsert['imgid'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_id'];
					$itemToInsert['parentimgid'] = $delta;
					$itemToInsert['mapimage'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i];
					$itemToInsert['imgwidth'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_width'];
					$itemToInsert['imgheight'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_height'];
					$itemToInsert['xcoordinate'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_x'];
					$itemToInsert['ycoordinate'] = $form['values']['mbda_zoom_map_content_setting']['mbda_zoom_map_subimage'.$i.'_y'];					
						
					if(drupal_write_record('mbda_zoom_map_image_map', $itemToInsert) == SAVED_UPDATED) {
						drupal_set_message("Updated value in database.");
					} else {
						drupal_set_message("Could not update values in database.", 'error');
					}
				}	
			}
		}		
	} else {
		drupal_set_message('New fields added at bottom.');
	}
}

/*--------------------------------------------------------------------------------------------------------*/


/**
 * This function takes the image id of the map and adds the nodes to that map and stores in the database. 
 * This is accessed using the menu link item
 * 
 * @param imgid this is the id of the map image in the database entered by the user.
 */
function mbda_zoom_map_add_edit_points($form_state, $mapimgid = NULL) {
	$form	= array();
	$subRegions = array();

	//AHAH Helper initialization
	ahah_helper_register($form, $form_state);
	
	//Checking if the mapimgid was sent or stored.
	if(!isset($form_state['storage']['mbda_zoom_map_temp_storage_mapimgid_points'])) {
		$mapimgid = $mapimgid;
	} else {
		$mapimgid = $form_state['storage']['mbda_zoom_map_temp_storage_mapimgid_points'];	
	}

	//Storing the mapimgid temporarily for formstate reuse
	$form['mbda_zoom_map_temp_storage_mapimgid_points'] = array(
		'#type' => 'value',
		'#value' => $mapimgid,
	);

	if(!isset($form_state['storage']['mbda_zoom_map_points_count'])) {
		$countoffields = 0;
	} else {
			$countoffields = $form_state['storage']['mbda_zoom_map_points_count'];
			if(isset($form_state['values']['add_more']) && $form_state['values']['op'] == 'Add another node') {
				$countoffields++;
			}
	}	
	
	//Gettin all values for default values
	if(!empty($mapimgid)) {
		
		//Checking if the mapid sent existss in the database
		$check_query = db_fetch_array(db_query("SELECT COUNT(*) as counter FROM {mbda_zoom_map_content} 
																						WHERE mapimageid = '%s'", array($mapimgid)));
		
		if($check_query['counter'] > 0 && 
				$form_state['storage']['mbda_zoom_map_initial_load_done_flag'] != 'DONE') {
			$countoffields = $check_query['counter'];
			
			//also retrieve all the children maps because there are some
			$getnodes_query = db_query("SELECT * FROM {mbda_zoom_map_content} WHERE mapimageid = '%s'", array($mapimgid));
			
			//Keeping track of the initial load. We donot want to load only the db ones everytime when editing.
				$form['mbda_zoom_map_initial_load_done_flag'] = array(
					'#type' => 'value',
					'#value' => 'DONE',
				);
			
			while($childItem = db_fetch_array($getnodes_query)) {
				$subRegions[] = $childItem;																				
			}
		}
	}
	
	//Creating the points count hidden field to keep track of how many pointes were generated
	$form['mbda_zoom_map_points_count'] = array(
		'#type' => 'value',
		'#value' => $countoffields,
	);
	
	
	
	//FIELDSET
	$form['mbda_zoom_map_point_setting'] = array(
		'#type' => 'fieldset',
		'#title' => t('Content Configuration'),
		'#collapsible' => TRUE,
		'#description' => t('This fieldset lets you change/add points and its data on the selected map.'),	
		'#prefix' => '<div id = "more_points_add_area">',
		'#suffix' => '</div>',
		'#tree' => TRUE,
	);	
	
		
	
	//For loops to keep count of number of zoom maps.
	for($i = 0 ; $i < $countoffields ; $i++) {

		//Field for nid, aid and divid
		$form['mbda_zoom_map_point_setting']['mbda_zoom_map_aid'.$i] = array(
			'#type' => 'textfield',
			'#title' => t('Enter ID for node '. ($i+1)),
			'#description' => t('Select an ID name for this node for uniquely identifying the point to edit. No spaces.'),
			'#default_value' => isset($form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_aid'.$i]) ? 
																$form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_aid'.$i] : 
																$subRegions[$i]['aid'],
			'#required' => TRUE,
			'#size' => 15,
			'#maxlength' => 15,
		);
		
		//Field for relx			
		$form['mbda_zoom_map_point_setting']['mbda_zoom_map_point'.$i.'_x'] = array(
			'#type' => 'textfield',
			'#title' => t('X Coordinate for node '. ($i+1)),
			'#description' => t('Enter the X pixel position on the selected map where you want to display this point.'),
			'#default_value' => isset($form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_point'.$i.'_x']) ? 
																$form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_point'.$i.'_x'] : 
																$subRegions[$i]['relx'],
			'#maxlength' => 4,
			'#size' => 4,
			'#required' => TRUE,
		);
		
		//Field for rely
		$form['mbda_zoom_map_point_setting']['mbda_zoom_map_point'.$i.'_y'] = array(
			'#type' => 'textfield',
			'#title' => t('Y Coordinate for node '. ($i+1)),
			'#description' => t('Enter the Y pixel position on the selected map where you want to display this point'),
			'#default_value' => isset($form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_point'.$i.'_y']) ? 
																$form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_point'.$i.'_y'] : 
																$subRegions[$i]['rely'],
			'#maxlength' => 4,
			'#size' => 4,
			'#required' => TRUE,
		);
		
		//Field for Header text
		$form['mbda_zoom_map_point_setting']['mbda_zoom_map_header'.$i] = array(
			'#type' => 'textfield',
			'#title' => t('Header text for node '. ($i+1)),
			'#description' => t('Enter the Header text for the popup box that will be displayed when clicked on this point.'),
			'#default_value' => isset($form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_header'.$i]) ? 
																$form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_header'.$i] : 
																$subRegions[$i]['headertitle'],
			'#maxlength' => 100,
			'#required' => TRUE,
		);
					
		//Field for Content text
		$form['mbda_zoom_map_point_setting']['mbda_zoom_map_body_content'.$i] = array(
			'#type' => 'textarea',
			'#title' => t('Content Text '. ($i+1)),
			'#description' => t('Enter the content for the popup box that will be displayed when clicked on this point.'),
			'#default_value' => isset($form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_body_content'.$i]) ? 
																$form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_body_content'.$i] : 
																$subRegions[$i]['divcontent'],
//			'#maxlength' => 300,
			'#required' => TRUE,
		);
	}
	
	
	
	$form['add_more'] = array(
		'#type' => 'submit',
		'#value' => 'Add another node',
		'#ahah' => array(
			'event' => 'click',
			'path' => ahah_helper_path(array('mbda_zoom_map_point_setting')),
			'wrapper' => 'more_points_add_area',
		),
	//	'#validate' => array('mbda_zoom_map_add_more_points'),
  );	
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
	);
	
	return $form;
}
/*--------------------------------------------------------------------------------------------------------*/
/**
 * Implementation of hook_submit() for the above form
 */
function mbda_zoom_map_add_edit_points_submit($form, &$form_state) {
  if ($form_state['values']['op'] == 'Save') {
  	
		//Query to count the number of nodes already present in db for this map.
		$exec_query = db_fetch_array(
										db_query("SELECT COUNT(*) as counter FROM {mbda_zoom_map_content} WHERE mapimageid = '%s'",
															array($form_state['values']['mbda_zoom_map_temp_storage_mapimgid_points']))
																);
								
		//Looping through all the values entered and saving them in the database
		for($i = 0, $counter = 0; $i < $form_state['values']['mbda_zoom_map_points_count']; $i++, $counter++) {
			
			$itemToInsert['nid'] = $form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_aid'.$i];
			$itemToInsert['mapimageid'] = $form_state['values']['mbda_zoom_map_temp_storage_mapimgid_points'];
			$itemToInsert['aid'] = $form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_aid'.$i];
			$itemToInsert['divid'] = $form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_aid'.$i].'-box';
			$itemToInsert['relx'] = $form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_point'.$i.'_x'];
			$itemToInsert['rely'] = $form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_point'.$i.'_y'];
			$itemToInsert['headertitle'] = $form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_header'.$i];
			$itemToInsert['divcontent'] = $form_state['values']['mbda_zoom_map_point_setting']['mbda_zoom_map_body_content'.$i];
			
			
			if($counter < $exec_query['counter']) {
				
				//Update if all counted nodes are not updated
				if(drupal_write_record('mbda_zoom_map_content', $itemToInsert, 'nid')) {
					drupal_set_message("Updated value in database.");
				} else {
					drupal_set_message("Could not update values in database.", 'error');
				}
				
			} else {
				
				//If updates done and still nodes left insert new ones
				if(drupal_write_record('mbda_zoom_map_content', $itemToInsert)) {
					drupal_set_message("Inserted new value in database.");
				} else {
					drupal_set_message("Could not insert values in database.", 'error');
				}				
			}			
		}		
  } else {
    drupal_set_message('More fields added to bottom of list.');
  }
}

/*--------------------------------------------------------------------------------------------------------*/
/**
 * This function returns a form for the configuration page of the zoom map.
 * When clicked on the setting in admin page this form is displayed.
 *
 * $return form elements for configuration of the map.
 *
 */  
function mbda_zoom_map_delete_map_and_contents(&$form_state, $mapimgid = NULL) {
	$form = array();
	
	$form['mbda_zoom_map_seleted_mapid'] = array(
		'#type' => 'hidden',
		'#default_value' => $mapimgid,
	);	
}

/*--------------------------------------------------------------------------------------------------------*/
/**
 * This function returns a form for the configuration page of the zoom map.
 * When clicked on the setting in admin page this form is displayed.
 *
 * $return form elements for configuration of the map.
 *
 */  
function mbda_zoom_map_settings(){
	
	$form = array();	
	$form['mbda_zoom_map_general_setting'] = array(
		'#type' => 'fieldset',
		'#title' => t('Basic Map Configuration'),
		'#collapsible' => TRUE,
		'#description' => t('This fieldset lets you change the common setting of all the maps.'),
	);
	
	$form['mbda_zoom_map_general_setting']['mbda_zoom_map_title'] = array(
		'#type' => 'textfield',
    '#title' => t('Default title for map'),
    '#default_value' => variable_get('mbda_zoom_map_title', 'MBDA Regional Offices'),
    '#description' => t('This title will be displayed when no title is selected for the map.'),
    '#required' => TRUE,
		'#size' => 50,
	);

	$form['mbda_zoom_map_general_setting']['mbda_zoom_map_return_text'] = array(
		'#type' => 'textfield',
    '#title' => t('Return button text'),
    '#default_value' => variable_get('mbda_zoom_map_return_text', 'Go Back'),
    '#description' => t('Enter the text you want to see on the button for returning back to the previous map when zoomed in.'),
    '#required' => FALSE,
		'#size' => 20,
	);

	$form['mbda_zoom_map_general_setting']['mbda_zoom_map_big_width'] = array(
		'#type' => 'textfield',
    '#title' => t('Default image width'),
    '#default_value' => variable_get('mbda_zoom_map_big_width', 960),
    '#description' => t('Enter deafult width of the image in pixels. This will be the image width if no width is entered for the image when entering. Applicable only for the parent map.'),
    '#required' => FALSE,
		'#size' => 4,
		'#maxlenth' => 4,
	);
		
	$form['mbda_zoom_map_general_setting']['mbda_zoom_map_big_height'] = array(
		'#type' => 'textfield',
    '#title' => t('Default image height'),
    '#default_value' => variable_get('mbda_zoom_map_big_height', 511),
    '#description' => t('Enter deafult height of the image in pixels. This will be the image height if no height is entered for the image when entering. Applicable only for the parent map.'),
    '#required' => FALSE,
		'#size' => 4,
		'#maxlenth' => 4,
	);
		
  $period = drupal_map_assoc(array(1,2,3));
	$form['mbda_zoom_map_general_setting']['mbda_zoom_map_zoom_duration'] = array(
		'#type' => 'select',
    '#title' => t('Zoom duration for the click on the map'),
    '#default_value' => variable_get('mbda_zoom_map_zoom_duration', 1),
		'#options' => $period,
    '#description' => t('Select how many seconds long the zooming animation should be when clicked on a zoomable clickable region on the zoom map.'),
    '#required' => FALSE,
	);
	
	return system_settings_form($form);
}
/*--------------------------------------------------------------------------------------------------------*/
/**
 * Implementation of hook_form_validate()
 * This function makes sure the values are entered properly.
 *
 * @param form an array that contains user data
 * @param form_state an array that contains user data
 */
function mbda_zoom_map_settings_validate($form_id, $form) {
	$widthcheck = $form['values']['mbda_zoom_map_big_width'];
	$heightcheck = $form['values']['mbda_zoom_map_big_height'];
	
	if(!is_numeric($widthcheck) || !is_numeric($heightcheck)) {
		drupal_set_message("Please enter valid numeric values for width and height.",'error');
		return;
	}
}

/*--------------------------------------------------------------------------------------------------------*/
/**
 * Implemenetation of hook_block();
 */
function mbda_zoom_map_block($op ='view', $delta = 0) {
	switch($op) {
		case 'list':
		
			//Listing all the blockids or sidepanel link instances created in the database
			$selectQuery = db_query("SELECT mapid FROM {mbda_zoom_map_image_map} WHERE parentimgid = ''");
			while($listItem = db_fetch_array($selectQuery)) {
				$blocks[$listItem['mapid']]['info'] = t('MBDA zoom map: @mapid', array('@mapid' => $listItem['mapid']));
			}
			return $blocks;
		case 'view':
			$block['subject'] = t(variable_get('mbda_zoom_map_title', 'MBDA regional offices'));
			$block['content'] = _mbda_zoom_map_getcontent('blockcontent', $delta);
			return $block;
	  case 'mb_enabled':
      return 'mb_enabled';
	} 
}
/*--------------------------------------------------------------------------------------------------------*/
/**
 * This private function retrieves the title for the page based on the delta value.
 *
 */
function _mbda_zoom_map_get_page_title($delta){
	$selectQuery = db_fetch_array(db_query("SELECT pagetitle FROM {mbda_zoom_map_page_title} 
																					WHERE mapid = '%s'", array($delta)));
	return $selectQuery['pagetitle'];
																					
}
/*--------------------------------------------------------------------------------------------------------*/
/**
 * This private function retrieves the content to be displayed in the block.
 *
 */
function _mbda_zoom_map_getcontent($contenttype = 'nodecontent', $delta){
	switch($contenttype) {
		case 'blockcontent':
			$selectQuery = db_query("SELECT mapimage FROM {mbda_zoom_map_image_map} 
																WHERE parentimgid = '' 
																AND mapid = '%s'", $delta);

			while($listItem = db_fetch_array($selectQuery)) {
				$pagecontent = "<div><a href='/main/".$delta."'>
												<img src='/" . $listItem['mapimage'] . "' width='100%' height='100%'>
												</a></div>";				
			}
							
			break;
	
		case 'nodecontent':
			$exec_query = db_fetch_array(db_query("SELECT mapimage FROM {mbda_zoom_map_image_map} 
																							WHERE parentimgid = '' AND mapid = '%s'", $delta));
																							
																							echo $exec_query[0]['mapimage'];
			$pagecontent = "<script type='text/javascript'>" . _mbda_zoom_map_generatesetupjs($delta) . "</script>" ;
			$pagecontent .= "<div style=\"background: url(/"
											.$exec_query['mapimage']
											.") top left no-repeat; \">
											
											<div id=\"map\"></div>
											
											</div>";
				break;
		}	 
	 return $pagecontent;
 } 
/*--------------------------------------------------------------------------------------------------------*/
/**
 * Setup javascript for the map
 *
 * This private function generates the setup javascript code for the map to work with.
 * 
 * @return dynamic jasvascript code for setting up the map and data.		
 */
function _mbda_zoom_map_generatesetupjs($delta) {
	
	//Retrieving the parent image
	$exec_query = db_fetch_array(db_query("SELECT mapid, imgid, parentimgid, mapimage, imgwidth, imgheight, xcoordinate, ycoordinate FROM {mbda_zoom_map_image_map} WHERE parentimgid = '' AND mapid = '%s'", $delta));	
	
	$parentimgid = $exec_query['imgid'];
	$mainmapimage =	$exec_query['mapimage'];
	$parentwidth = 	$exec_query['imgwidth'];
	$parentheight = $exec_query['imgheight'];
		
	//Retrieving the child images using the parent id retrived above
	$subquery = db_query("SELECT mapid, imgid, parentimgid, mapimage, imgwidth, imgheight, xcoordinate, ycoordinate FROM {mbda_zoom_map_image_map} WHERE parentimgid = '%s' AND mapid = '%s' ORDER BY imgid ASC", $parentimgid, $delta);

	while($keyvalue = db_fetch_array($subquery)) {
		$exec_subregion_query[] = $keyvalue;
	}
	
	//Generating the setup javascript for the image map.
		
	$code="
		$(document).ready(function(){
		
		$('#map').zoommap({
				// Width and Height of the Map
				width: '" . $parentwidth/*variable_get('mbda_zoom_map_big_width',960)*/ . "px',
				height: '" . $parentheight/*variable_get('mbda_zoom_map_big_height',511)*/ . "px',
					
				//Misc Settings
				blankImage: '/" . variable_get('file_directory_path', '') . "/images/zoommap/blank.gif',
				zoomDuration: " . variable_get('mbda_zoom_map_zoom_duration',1) . "000,
				bulletWidthOffset: '10px',
				bulletHeightOffset: '10px',
				
				//ids and classes
				zoomClass: 'zoomable',
				popupSelector: 'div.popup',
				popupCloseSelector: 'a.close',
				
				//Return to Parent Map Link
				showReturnLink: true,
				returnId: 'returnlink',
				returnText: '" . variable_get('mbda_zoom_map_return_text','Go Back') . "',
				
				//Initial Region to be shown
				map: {
					id: '".$parentimgid."',
					image: '/" . $mainmapimage . "',
					data: '/" . mbda_zoom_map_get_datapoints_on_image($parentimgid) . "',
					maps: [";
	for($i = 0; $i < sizeof($exec_subregion_query); $i++) {
		//NOTE: x and y coordinates are oppsite to what is stored. i.e. x is y and y is x.
		$code .= "
					{
						id: '" . $exec_subregion_query[$i]['imgid'] . "',
						parent: '" . $parentimgid . "',
						image: '/" . $exec_subregion_query[$i]['mapimage'] . "',
						data: '/" . mbda_zoom_map_get_datapoints_on_image($exec_subregion_query[$i]['imgid']) . "',
						width: '" . $exec_subregion_query[$i]['imgwidth'] . "px',
						height: '" . $exec_subregion_query[$i]['imgheight'] . "px',
						top: '" . ($exec_subregion_query[$i]['ycoordinate'] - ($exec_subregion_query[$i]['imgheight']/2)) . "px',
						left: '" . ($exec_subregion_query[$i]['xcoordinate'] - ($exec_subregion_query[$i]['imgwidth']/2)) . "px'						
					},";
	}
					
	$code .= "
					]
				}
			});
	});";
	
	return $code;
}
/*--------------------------------------------------------------------------------------------------------*/
/**
 * This function call will generate and return an HTML file containing the data points on the image from the database.
 * 
 * @param imageid the id of the image in the database of which the data points are to be retrieved
 */
function mbda_zoom_map_get_datapoints_on_image($imageid) {
	
	$exec_query = db_query("SELECT mapimageid, aid, divid, relx, rely, headertitle, divcontent FROM {mbda_zoom_map_content} WHERE mapimageid = '%s'", $imageid);
	
	$tailoredContent = '';
	while($keyvalue = db_fetch_array($exec_query)) {
			$tailoredContent .= '<a href="javascript:void(0)" id="'.$keyvalue['aid'].'" class="bullet" '; 
			$tailoredContent .= 'rel="'.$keyvalue['relx'].'-'.$keyvalue['rely'].'">&nbsp;</a>';
			$tailoredContent .= '<div class="popup" id="'. $keyvalue['divid'] .'"> ';
			$tailoredContent .= '<h3>'. $keyvalue['headertitle'] .'</h3>';
			$tailoredContent .= '<div class="popupcontent">'; 
			$tailoredContent .= '<p>'. $keyvalue['divcontent'] .'</p>'; 
			$tailoredContent .= '</div>';
			$tailoredContent .= '<a class="close" href="javascript:void(0)">Close</a>'; 
			$tailoredContent .= '</div>';
	}
	
	//Retrieving the parent image
	$namequery = db_fetch_array(db_query("SELECT mapid, imgid FROM {mbda_zoom_map_image_map} WHERE imgid = '%s'", $imageid));	
	
	$filename = $namequery['mapid'].'-'.$namequery['imgid'];
	
	$fp=fopen(variable_get('file_directory_path', '')."/images/zoommap/$filename.html","wb");
	fwrite($fp,$tailoredContent);
	fclose($fp);
	
	//create the file and return the file name
	return variable_get('file_directory_path', '')."/images/zoommap/$filename.html";
	
}
